//
// Copyright (c) 2015 
// Licensed under the Academic Free License version 3.0
//
// History:
//   30 Nov 15  Divisuals  Derived from SpyWeblet
//

**
** SpyRESTWeblet is a built-in weblet which provides diagnostics
** visibility to the Sedona runtime in a REST/json format.
**
class SpyRESTWeblet
  extends Weblet
{

////////////////////////////////////////////////////////////////
// Weblet Registration
////////////////////////////////////////////////////////////////

  static void _sInit()
  {
    rest.register()
  }
  static internal inline SpyRESTWeblet rest

////////////////////////////////////////////////////////////////
// Weblet
////////////////////////////////////////////////////////////////

  override Str prefix() { return "spyREST" }
  
  override Str description() { return "Sedona runtime diagnostics (REST)" }

  override void get(WebReq req, WebRes res)
  {
    // route to non-html pages
    Str p = ""
    if (req.path.size > 1) p = req.path.names[1]
    if (p.equals("backup")) { backupApp(req, res); return }

    // start header
    res.json()
    nav(req, res)

    // route to html pages
    if (p.equals("app")) app(req, res)
    else if (p.equals("kits"))  kits(req, res)
    else if (p.equals("sox"))   sox(req, res)
    else if (p.equals("echo"))  echo(req, res)
    else if (p.equals("logs"))  logs(req, res)
    else index(req, res)

    // standard footer
    res.jsonEnd()
  }

  private void nav(WebReq req, WebRes res)
  {
    Path path = req.path
    res.jsonStr("path").w(":\"")
    for (int i=1; i<path.size; ++i)
    {
      for (int j=0; j<=i; ++j) res.w(" | ").w(path.names[j])
    }
    res.w("\",")
  }

////////////////////////////////////////////////////////////////
// Index
////////////////////////////////////////////////////////////////

  public void index(WebReq req, WebRes res)
  {
    App app = Sys.app   
    PlatformService plat = app.platform
    res.jsonStr("Summary").w(": {");
    
    res.jsonStr("platformType").w(":\"").w(plat.type.kit.name).w("::").w(plat.type.name).w("\", ");
    res.jsonKV("platformId", plat.platformId.toStr()).w(", ");
    res.jsonKV("name", app.name).w(", ");
    res.jsonStr("uptime").w(":\"").printElapsed(Sys.bootTime).w("\", ");
    res.jsonStr("cycleCount").w(":\"").printLong(app.cycleCount);
    res.w("\"}, ")
    
    res.jsonStr("IndexSpy").w(": [")
    res.jsonStr("/spyREST/app").w(", ")
    res.jsonStr("/spyREST/kits").w(", ")
    res.jsonStr("/spyREST/logs").w(", ")
    res.jsonStr("/spyREST/sox").w(", ")
    res.jsonStr("/spyREST/echo").w(" ], ")

    res.jsonStr("Weblets").w(": {")
    Weblet wl = WebService.weblets
    res.jsonKV(wl.prefix(), wl.description())
    wl = wl.nextWeblet
    for (Weblet w = wl; w != null; w = w.nextWeblet)
    {
      res.w(", ")
      res.jsonKV(w.prefix(), w.description())
    }
    res.w("}")
  }

////////////////////////////////////////////////////////////////
// App
////////////////////////////////////////////////////////////////

  void app(WebReq req, WebRes res)
  {
    Path path = req.path
    if (req.path.size > 2)
    {
      int id = req.path.names[2].parseInt()
      Component c = Sys.app.lookup(id)
      if (c != null)
      {
        appComponent(req, res, c)
        return
      }
    }
    appComponent(req, res, Sys.app)
  }

  void appComponent(WebReq req, WebRes res, Component c)
  {
    App app = Sys.app
    Type t = c.type

    // component fields
    res.jsonStr("Component").w(": {")

    // path
    res.jsonStr("Path").w(": \"")
    res.w("App")
    Component[] path = c.path()
    if (path != null)
    {
      for (int i=0; path[i] != null; ++i)
      {
        Component x = path[i]
        res.w(" / ").w(x.name).w(" [").wi(x.id).w("]")
      }
    }
    res.w("\", ")

    // meta-data
    res.jsonStr("Id").w(":\"").wi(c.id).w("\", ")
    res.jsonKV("Name", c.name).w(", ")
    res.jsonStr("Type").w(":\"").w(t.kit.name).w("::").w(t.name).w("\", ")
/* TODO
    res.w("<tr>").th("watches").td()
     res.w("subs = 0x").printHex(c.sessionSubscriptions)
     res.w(" | config = 0x").printHex(c.sessionConfigChanges)
     res.w(" | rt = 0x").printHex(c.sessionRuntimeChanges)
     res.w("</td></tr>\n")
*/

    // slots
    res.jsonStr("Slots").w(": [")
    foreach (Slot slot : t.slots, t.slotsLen)
    {
      res.w("{ ")
      res.jsonStr("Id").w(":\"").wi(slot.id).w("\", ")
      res.jsonKV("Name", slot.name).w(", ")
      res.jsonKV("Type", slot.type.name).w(", ")
      res.jsonStr("Value").w(":\"")
      if (slot.isProp()) res.printProp(c, slot)
      res.w("\" }, ")
    }
    res.w(" {} ] } ,")

    // children
    res.jsonStr("Children").w(": [")
    for (Component kid = app.lookup(c.children); kid != null; kid = app.lookup(kid.nextSibling)) 
    {
      res.w("{ ")
      res.jsonKV("Id", Sys.intStr(kid.id)).w(", ")
      res.jsonKV("Name", kid.name).w(", ")
      res.jsonStr("Type").w(":\"").w(kid.type.kit.name).w("::").w(kid.type.name).w("\" }, ")
    }
    res.w("{} ]")

    // links
    if (c.linksFrom != null || c.linksTo != null)
    {
      res.w(", ").jsonStr("Links").w(": [")

      // links from
      for (Link link = c.linksFrom; link != null; link = link.nextFrom)
      {
        Component to = app.lookup(link.toComp)
        res.w("{")
           .jsonKV("From", t.slot(link.fromSlot).name).w(", ")
           .jsonKV("To", to.type.slot(link.toSlot).name)
           .w("} , ")
      }

      // links to
      for (Link link = c.linksTo; link != null; link = link.nextTo)
      {
        Component from = app.lookup(link.fromComp)
        res.w("{")
           .jsonKV("From", from.type.slot(link.fromSlot).name).w(", ")
           .jsonKV("To", t.slot(link.toSlot).name)
           .w("} ,")
      }
      res.w("{} ]")
    }
    res.w("")
  }

////////////////////////////////////////////////////////////////
// Kits
////////////////////////////////////////////////////////////////

  public void kits(WebReq req, WebRes res)
  {
    Path path = req.path
    if (path.size > 2)
    {
      Kit kit = Sys.findKit(path.names[2])
      if (kit != null)
      {
        if (path.size > 3)
        {
          Type t = kit.findType(path.names[3])
          if (t != null)
          {
            kitsType(req, res, t)
            return
          }
        }

        kitsKit(req, res, kit)
        return
      }
    }

    kitsIndex(req, res)
  }

  public void kitsIndex(WebReq req, WebRes res)
  {
    res.jsonStr("Kits").w(": [")
    foreach (Kit k : Sys.kits)
    {
      res.w("{ ")
      res.jsonStr("Id").w(":\"").wi(k.id).w("\", ")
      res.jsonKV("Name", k.name).w(", ")
      res.jsonKV("Version", k.version).w(", ")
      res.jsonStr("Checksum").w(":\"").w("0x").printHex(k.checksum).print("\"")
      res.w(" }, ")
    }
    res.w("{} ]")
  }

  public void kitsKit(WebReq req, WebRes res, Kit k)
  {
    // meta-data
    res.jsonStr("Id").w(":\"").wi(k.id).w("\", ")
    res.jsonKV("Name", k.name).w(", ")
    res.jsonKV("Version", k.version).w(", ")
    res.jsonStr("Checksum").w(":\"").w("0x").printHex(k.checksum).print("\",")

    // types
    res.jsonStr("Types").w(": [")
    foreach (Type t : k.types, k.typesLen)
    {
      res.w("{ ")
      res.jsonStr("Id").w(":\"").wi(t.id).w("\", ")
      res.jsonKV("Name", t.name)
      res.w(" }, ")
    }
    res.w("{} ]")
  }

  public void kitsType(WebReq req, WebRes res, Type t)
  {
    Type base = t.base

    // meta-data
    res.jsonStr("Id").w(":\"").wi(t.kit.id).w("::").wi(t.id).w("\", ")
    res.jsonStr("qName").w(":\"").w(t.kit.name).w("::").w(t.name).w("\", ")
    res.jsonStr("base").w(":\"")
    if (base != null) res.w(base.kit.name).w("::").w(base.name)
    res.w("\", ")
    res.jsonStr("sizeOf").w(":\"").wi(t.sizeof).w("\", ")

    // slots
    res.jsonStr("Slots").w(": [")
    foreach (Slot slot : t.slots, t.slotsLen)
    {
      res.w("{ ")
      res.jsonStr("Id").w(":\"").wi(slot.id).w("\", ")
      res.jsonKV("Name", slot.name).w(", ")
      res.jsonKV("Type", slot.type.name)
      res.w(" }, ")
    }
    res.w("{} ]")
  }

////////////////////////////////////////////////////////////////
// Sox
////////////////////////////////////////////////////////////////

  void sox(WebReq req, WebRes res)
  {
    SoxService sox = (SoxService)Sys.app.lookupService(SoxService.type)
    if (sox == null)
    {
      res.jsonKV("Error", "SoxService not installed")
      return
    }

    Path path = req.path
    if (path.size > 2)
    {
      int id =  path.names[2].parseInt()
      if (0 <= id && id < Watch.max)
      {
//        soxWatch(req, res, sox.watches[id])
        return
      }
    }

    soxIndex(req, res, sox)
  }

  void soxIndex(WebReq req, WebRes res, SoxService sox)
  {
    res.jsonStr("SoxSessions").w(": [")
    int i = 0                
/* TODO    
    foreach (SoxWatch w : sox.watches, Watch.max)
    {
      res.w("{ ")
      res.jsonStr("Id").w(":\"").wi(i).w("\", ")
      res.jsonStr("Closed").w(":\"").printBool(w.closed).print("\", ")
      res.jsonKV("Address", w.addr.host.toStr()).w("</td>")
      res.jsonStr("Port").w(":\"").wi(w.addr.port).w("\", ")
      res.jsonStr("Last Receive").w(":\"").printElapsed(w.lastReceiveTicks).print("\"")
      res.w(" }, ")
      i++
    }
*/    
    res.w("{} ]")
  }

/* TODO
  public void soxWatch(WebReq req, WebRes res, SoxWatch watch)
  {
    int index = watch.index

    res.w("<b>Sox Session ").wi(watch.id()).w("</b>\n")

    res.w("<table border='1'>\n")
    res.trTitle("Subscriptions", 5).nl()
    res.w("<tr>").th("Id").th("Name").th("Type").th("Subs").th("Events").w("</tr>\n")
    foreach (Component c : Sys.app.comps, Sys.app.compsLen)
      if  (c != null && (c.watchFlags[index] & Watch.subAll) != 0)
        soxWatchRow(req, res, watch, c)
    res.w("</table>")

    res.w("<br/><br/>")
    res.w("<table border='1'>\n")
    res.trTitle("Event Queue", 2).nl()
    res.w("<tr>").th("Component Id").th("Config/Runtime").w("</tr>")
    for (int i=0; i<32; ++i)
    {
      int id = session.unackedEventCompIds[i]
      if (id < 0) continue
      bool cfg = (session.unackedEventTypes & i) != 0
      res.w("<tr>")
      res.td().wi(id).w("</td>")
      res.td()
        if (cfg) res.w("config")
        else res.w("runtime")
        res.w("</td>")
      res.w("</tr>\n")
    }
    res.w("</table>")
  }

  public void soxWatchRow(WebReq req, WebRes res, SoxWatch w, Component c)
  {
    int flags = c.watchFlags[w.index]
    res.w("<tr>")
    componentRow(req, res, c, false)
    tdWatchFlags(res, flags >> 4)
    tdWatchFlags(res, flags & 0x4)
    res.w("</tr>\n")
  }
*/
/*
  private void tdWatchFlags(WebRes res, int flags)
  {
    res.td()
    if ((flags & Watch.eventTree)    != 0) res.writeChar('t')
    if ((flags & Watch.eventConfig)  != 0) res.writeChar('c')
    if ((flags & Watch.eventRuntime) != 0) res.writeChar('r')
    if ((flags & Watch.eventLinks)   != 0) res.writeChar('l')
    res.w("</td>")
  }
*/

////////////////////////////////////////////////////////////////
// Logs
////////////////////////////////////////////////////////////////

  public void logs(WebReq req, WebRes res)
  { /* TODO: change log level with POST
    if (req.path.size >= 4)
    {
      int id    = req.path.names[2].parseInt()
      int level = req.path.names[3].parseInt()
      Log log = Sys.log(id)
      if (log != null) Sys.logLevels[id] = level
    }
    */
    res.jsonStr("Logs").w(": [")
    foreach (Log log : Sys.logs, Sys.logsLen)
    {
      res.w("{ ")
      res.jsonStr("Id").w(":\"").wi(log.id).w("\", ")
      res.jsonKV("Name", log.qname).w(", ")
      res.jsonKV("Level", sys::Log.levelStr(log.level()))
      res.w("} , ")
    }
    res.w("{} ] ")
  }

////////////////////////////////////////////////////////////////
// Backup - TODO: enable with POST
////////////////////////////////////////////////////////////////

  public void backupApp(WebReq req, WebRes res)
  {
    // Write app contents as XML text to web page
    res.writeStatus(200)
    res.writeContentType("text/plain")
    res.finishHeaders()

    res.w("<?xml version='1.0'?>\n")
    res.w("<sedonaApp>\n")
    res.nl()

    // List kits in schema
    res.w("  <schema>\n")
    foreach (Kit kit : Sys.kits, Sys.kitsLen)
      res.w("    <kit name='").w(kit.name).w("' checksum='").printHex(kit.checksum).print("'/>\n")
    res.w("  </schema>\n")
    res.nl()

    // Recursive backup starting with app
    backupComp(res, Sys.app, 0)

    res.nl()

    // Backup links (walk linksTo on each component)
    res.w("<links>\n")
    foreach (Component c : Sys.app.comps, Sys.app.compsLen)
    {
      if (c == null) continue
      for (Link link = c.linksTo; link != null; link = link.nextTo)
        backupLink(Sys.app, res, link)
    }
    res.w("</links>\n")
    res.nl()

    res.w("</sedonaApp>\n")
  }

  private void backupComp(WebRes res, Component c, int indent)
  {
    Str tag = "comp"
    if (c.name.equals("app"))
    {
      tag = "app"
      res.spaces(indent).w("<").w(tag).w(">").nl()
    }
    else
    {
      res.spaces(indent).w("<").w(tag)
      res.w(" name=\"").w(c.name).w("\" id=\"").w("${c.id}")
      res.w("\" type=\"").w(c.type.kit.name).w("::").w(c.type.name)
      res.w("\">").nl();
    }

    // config properties
    foreach (Slot slot : c.type.slots, c.type.slotsLen)
    {
      if (slot.isProp() && slot.isConfig())
      {
        res.spaces(indent+2).w("<prop name=\"").w(slot.name).w("\" val=\"")
        res.printProp(c, slot)
        res.w("\" />").nl();
      }
    }

    // children
    int nextKid = c.children
    while (nextKid != nullId)
    {
      res.nl();
      Component kid = Sys.app.lookup(nextKid);
      if (kid == null) continue;
      backupComp(res, kid, indent+2);
      nextKid = kid.nextSibling
    }

    // close component
    res.spaces(indent).w("</").w(tag).w(">")
  }



  private void backupLink(App app, WebRes res, Link link)
  {
    // TODO: path based links not really supported correctly
    Component from = app.lookup(link.fromComp);
    Component to   = app.lookup(link.toComp);
    if (from == null || to == null) return;

    Slot fromSlot = from.type.slot(link.fromSlot);
    Slot toSlot   = to.type.slot(link.toSlot);
    if (fromSlot == null || toSlot == null) return;

    res.spaces(2).w("<link from=\"")
    recurPrint(res, from, "/")
    res.w(".").w(fromSlot.name).w("\" to=\"")
    recurPrint(res, to, "/")
    res.w(".").w(toSlot.name).w("\" />").nl();
  }



  // Print component names with given delimiter d
  private void recurPrint(WebRes res, Component c, Str d)
  {
    if (c==null) return
    if ((c.parent!=nullId) && (c.parent!=0))
      recurPrint(res, Sys.app.lookup(c.parent), d)
    res.w(d).w(c.name)
  }


////////////////////////////////////////////////////////////////
// Echo
////////////////////////////////////////////////////////////////

  public void echo(WebReq req, WebRes res)
  {
    res.jsonStr("WebReq").w(": {")
    res.jsonStr("method").w(":\"").w(req.method).w("\", ")
    res.jsonStr("uri").w(":\"").w(req.uri).w("\", ")
    res.jsonStr("version").w(":\"").w(req.version).w("\", ")
    res.jsonStr("path").w(":\"")
    // Echo parsed path elements
    int count = req.path.size
    for (int i=0; i<count; ++i)
      res.w(" | ").w(req.path.names[i])
    res.w("\", ")
    res.jsonStr("query").w(":\"").w(req.query).w("\", ")
    res.jsonStr("params").w(": {")
    // Echo HTTP request parameters
    count = req.params.size
    for (int i=0; i<count-1; ++i)
      res.jsonKV(req.params.names[i], req.params.values[i]).w(", ")
    res.jsonKV(req.params.names[count-1], req.params.values[count-1])
    res.w(" } }")
  }

}
