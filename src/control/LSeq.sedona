//
// Copyright (c) 2007 Tridium, Inc
// Licensed under the Academic Free License version 3.0
//
// History:
//   18 Jan 07  Andy Saunders  Creation
//   27 Apr 07  Brian Frank    Port from Java to Sedona
//

**
** LSeq will provide a linear sequence of 2 to 16 loads based on a 0 - 100 input.
**
@niagaraIcon="module://icons/x16/control/control.png"
class LSeq
  extends Component

{


  property float in                      // cv input
  @config property float inMin  = 0.0    // input minimum
  @config property float inMax = 100.0f  // iniput maximum
  @config property int numOuts = 16      // number of outputs to control over  range
  property bool out1
  property bool out2
  property bool out3
  property bool out4
  property bool out5
  property bool out6
  property bool out7
  property bool out8
  property bool out9
  property bool out10
  property bool out11
  property bool out12
  property bool out13
  property bool out14
  property bool out15
  property bool out16
  property byte dOn                      // desired number of outputs on.

  virtual override void execute()
  {
    int numOutputs = numOuts

    float range = inMax - inMin
    float spDelta = range / (float)numOutputs
    float cv = in
    float min = inMin
    int numStagesOn = (int)((cv-min)/spDelta)

    //Sys.log("cv          = ").print(cv).nl();
    //Sys.log("spDelta     = ").print(spDelta).nl();
    //Sys.log("numStagesOn = ").print(numStagesOn).nl();

    dOn = numStagesOn
    // loop through out1 - out16 setting desired state
    for(int i = 0; i < 16; i++ )
    {
      setBool(type.slots[LSeq.out1.id+i], ((i+1) <= numStagesOn))
    }
  }

  int numStagesOn = 0

}
